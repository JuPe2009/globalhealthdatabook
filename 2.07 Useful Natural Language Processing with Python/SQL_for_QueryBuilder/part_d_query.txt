-- Part D - Obesity challenge

-- The following queries extract the obesity notes dataset for the Obesity challenge exercise
-- The SQL code below should work direcly in Query Builder: https://querybuilder-lcp.mit.edu

-- The queries are built on top of existing weightheight query from MIMIC
-- https://github.com/MIT-LCP/mimic-code/tree/master/concepts/demographics/ HeightWeightQuery.sql


WITH

FirstVRawData AS
  (SELECT c.charttime,
    c.itemid,c.subject_id,c.icustay_id,
    CASE
      WHEN c.itemid IN (762, 763, 3723, 3580, 3581, 3582, 226512)
        THEN 'WEIGHT'
      WHEN c.itemid IN (920, 1394, 4187, 3486, 3485, 4188, 226707)
        THEN 'HEIGHT'
    END AS parameter,
    -- Ensure that all weights are in kg and heights are in centimeters
    CASE
      WHEN c.itemid   IN (3581, 226531)
        THEN c.valuenum * 0.45359237
      WHEN c.itemid   IN (3582)
        THEN c.valuenum * 0.0283495231
      WHEN c.itemid   IN (920, 1394, 4187, 3486, 226707)
        THEN c.valuenum * 2.54
      ELSE c.valuenum
    END AS valuenum
  FROM chartevents c
  WHERE c.valuenum   IS NOT NULL
  -- exclude rows marked as error
  AND c.error IS DISTINCT FROM 1
  AND ( ( c.itemid  IN (762, 763, 3723, 3580, -- Weight Kg
    3581,                                     -- Weight lb
    3582,                                     -- Weight oz
    920, 1394, 4187, 3486,                    -- Height inches
    3485, 4188                                -- Height cm
    -- Metavision
    , 226707 -- Height (measured in inches)
    , 226512 -- Admission Weight (Kg)

    -- note we intentionally ignore the below ITEMIDs in metavision
    -- these are duplicate data in a different unit
    -- , 226531 -- Admission Weight (lbs.)
    -- , 226730 -- Height (cm)
    )
  AND c.valuenum <> 0 )
    ) )
  --)

  --select * from FirstVRawData

, SingleParameters AS (
  SELECT DISTINCT subject_id,
         icustay_id,
         parameter,
         first_value(valuenum) over
            (partition BY subject_id, icustay_id, parameter
             order by charttime ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)
             AS first_valuenum,
         MIN(valuenum) over
            (partition BY subject_id, icustay_id, parameter
            order by charttime ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)
            AS min_valuenum,
         MAX(valuenum) over
            (partition BY subject_id, icustay_id, parameter
            order by charttime ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)
            AS max_valuenum
    FROM FirstVRawData

--   ORDER BY subject_id,
--            icustay_id,
--            parameter
  )
--select * from SingleParameters

, PivotParameters AS (SELECT subject_id, icustay_id,
    MAX(case when parameter = 'HEIGHT' then first_valuenum else NULL end) AS height_first,
    MAX(case when parameter = 'HEIGHT' then min_valuenum else NULL end)   AS height_min,
    MAX(case when parameter = 'HEIGHT' then max_valuenum else NULL end)   AS height_max,
    MAX(case when parameter = 'WEIGHT' then first_valuenum else NULL end) AS weight_first,
    MAX(case when parameter = 'WEIGHT' then min_valuenum else NULL end)   AS weight_min,
    MAX(case when parameter = 'WEIGHT' then max_valuenum else NULL end)   AS weight_max
  FROM SingleParameters
  GROUP BY subject_id,
    icustay_id
  )
--select * from PivotParameters

, heightweight AS (SELECT f.icustay_id,
  f.subject_id,
  ROUND( cast(f.height_first as numeric), 2) AS height_first,
  ROUND(cast(f.height_min as numeric),2) AS height_min,
  ROUND(cast(f.height_max as numeric),2) AS height_max,
  ROUND(cast(f.weight_first as numeric), 2) AS weight_first,
  ROUND(cast(f.weight_min as numeric), 2)   AS weight_min,
  ROUND(cast(f.weight_max as numeric), 2)   AS weight_max

FROM PivotParameters f
ORDER BY subject_id, icustay_id
)
--select * from heightweight

, temp AS(
SELECT subject_id, icustay_id, weight_first, height_first, (hw.weight_first/(hw.height_first/100*hw.height_first/100)) AS bmi
FROM heightweight AS hw
LIMIT 400
)

, temp2 AS(
SELECT *,
CASE
WHEN (BMI < 25 and bmi > 19) THEN 0
WHEN (BMI > 30 and BMI < 50) THEN 1
END AS obese
FROM temp
WHERE (bmi < 25 and bmi > 19) or (bmi > 30 and bmi < 50)
ORDER BY obese
)

, temp3 AS(
SELECT t2.*, icu.hadm_id
FROM temp2 AS t2
LEFT JOIN icustays AS icu
ON t2.icustay_id = icu.icustay_id
)

, temp4 AS(
SELECT t3.subject_id, t3.hadm_id, t3.icustay_id, t3.weight_first, t3.height_first, t3.bmi, t3.obese, ne.chartdate, ne.category, ne.description, ne.text,
row_number() OVER (PARTITION BY t3.hadm_id ORDER BY ne.chartdate) AS rn
FROM temp3 AS t3
LEFT JOIN noteevents ne
ON t3.hadm_id = ne.hadm_id
WHERE category = 'Discharge summary' and description = 'Report'
)

-- final query
SELECT t4.subject_id, t4.hadm_id, t4.icustay_id, t4.weight_first, t4.height_first, t4.bmi, t4.obese, t4.chartdate, t4.category, t4.description, t4.text
FROM temp4 AS t4
WHERE rn = 1
ORDER BY obese;